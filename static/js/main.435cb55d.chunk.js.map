{"version":3,"sources":["SortingAlgorithms/InsertionSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/QuickSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["InsertionSort","array","arr","slice","animations","index","length","currentIndex","temp","push","SelectionSort","i","minIndex","j","BubbleSort","hasChanged","GetQuickSortAnimation","QuickSort","low","high","pi","Partition","abort","SortingVisualizer","props","state","arrayToSort","prevChanged","numberOfItems","delay","this","resetArray","RandomIntBetweenRange","setState","algo","sortedArrayAnim","console","log","sleep","event","persist","target","value","includes","widthValue","className","id","map","heightValue","idx","key","style","height","width","backgroundColor","getColor","onClick","generateNewArray","SortArray","selectionSort","type","min","max","onChange","handleItemsInputOnChange","defaultValue","handleDelayInputOnChange","Math","floor","random","React","Component","milliseconds","Promise","resolve","setTimeout","App","ReactDOM","render","document","getElementById"],"mappings":"mSAAe,SAASA,EAAcC,GAGlC,IAFA,IAAIC,EAAMD,EAAME,MAAM,GAClBC,EAAa,GACRC,EAAQ,EAAGA,EAAQH,EAAII,OAAQD,IAEpC,GAAY,GAATA,EAEC,IADA,IAAIE,EAAeF,EACbH,EAAIK,GAAgBL,EAAIK,EAAe,IACtB,GAAhBA,GADyC,CAE5C,IAAIC,EAAON,EAAIK,GACfL,EAAIK,GAAgBL,EAAIK,EAAe,GACvCL,EAAIK,EAAe,GAAKC,EACxBJ,EAAWK,KAAK,CAACF,EAAcA,EAAe,IAC9CA,IAIZ,OAAOH,ECjBI,SAASM,EAAcR,GAGlC,IAFA,IAAID,EAAQC,EAAIC,MAAM,GAClBC,EAAa,GACRO,EAAI,EAAGA,EAAIV,EAAMK,OAAQK,IAAK,CAEnC,IADA,IAAIC,EAAWD,EACNE,EAAIF,EAAGE,EAAIZ,EAAMK,OAAQO,IAC3BZ,EAAMY,GAAKZ,EAAMW,KAChBA,EAAWC,EACXT,EAAWK,KAAK,CAACE,EAAGC,GAAU,KAItC,IAAIJ,EAAOP,EAAMU,GACjBV,EAAMU,GAAKV,EAAMW,GACjBX,EAAMW,GAAYJ,EAClBJ,EAAWK,KAAK,CAACE,EAAGC,GAAU,IAGlC,OAAOR,EClBI,SAASU,EAAWb,GAG/B,IAFA,IAAIC,EAAMD,EAAME,MAAM,GAClBC,EAAa,KACN,CAEP,IADA,IAAIW,GAAa,EACRJ,EAAI,EAAGA,EAAIT,EAAII,OAAS,EAAGK,IAChC,GAAGT,EAAIS,GAAKT,EAAIS,EAAI,GAAG,CACnB,IAAIH,EAAON,EAAIS,GACfT,EAAIS,GAAKT,EAAIS,EAAI,GACjBT,EAAIS,EAAI,GAAKH,EACbJ,EAAWK,KAAK,CAACE,EAAGA,EAAI,IACxBI,GAAa,EAIrB,IAAIA,EACA,MAER,OAAOX,EClBX,IAAIA,EAAa,GACF,SAASY,EAAsBf,GACtCG,EAAa,GACb,IAAIF,EAAMD,EAAME,MAAM,GAEtB,OAGR,SAASc,EAAUf,EAAKgB,EAAKC,GAEzB,GAAGD,EAAMC,EAAK,CACV,IAAIC,EAOZ,SAAmBlB,EAAKgB,EAAKC,GAEzB,IADA,IAAIR,EAAIO,EAAM,EACLb,EAAQa,EAAKb,GAASc,EAAO,EAAGd,IACrC,GAAIH,EAAIG,IAAUH,EAAIiB,GAAM,CACxBR,IAEA,IAAIH,EAAON,EAAIS,GACfT,EAAIS,GAAKT,EAAIG,GACbH,EAAIG,GAASG,EACbJ,EAAWK,KAAK,CAACE,EAAGN,IAG5B,IAAIG,EAAON,EAAIS,EAAI,GAInB,OAHAT,EAAIS,EAAI,GAAKT,EAAIiB,GACjBjB,EAAIiB,GAAQX,EACZJ,EAAWK,KAAK,CAACE,EAAI,EAAGQ,IACjBR,EAAI,EAvBEU,CAAUnB,EAAKgB,EAAKC,GAC7BF,EAAUf,EAAKgB,EAAKE,EAAK,GACzBH,EAAUf,EAAKkB,EAAK,EAAGD,IATvBF,CAAUf,EAAK,EAAGA,EAAII,OAAS,GACxBF,ECEf,IAIIkB,GAAQ,EAESC,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,YAAa,GACbC,YAAa,GACbC,cAAe,IACfC,MAAO,IANG,E,gEAWdC,KAAKC,e,mCAML,IAFA,IAAML,EAAc,GAEXf,EAAI,EAAGA,EAAImB,KAAKL,MAAMG,cAAejB,IAC1Ce,EAAYjB,KAAKqB,KAAKE,sBAAsB,EAAG,MAEnDF,KAAKG,SAAS,CAAEP,cAAaC,YAJT,KAKpBL,GAAQ,I,yCAIRA,GAAQ,EACRQ,KAAKC,e,yEAGOG,G,qFACRC,EAAkBD,EAAKJ,KAAKL,MAAMC,aAClCA,EAAcI,KAAKL,MAAMC,YACzBC,EAAcG,KAAKL,MAAME,YAEpBtB,EAAQ,E,YAAGA,EAAQ8B,EAAgB7B,Q,qBACrCwB,KAAKR,M,uBACJc,QAAQC,IAAIf,G,kBACL,M,4BAEGa,EAAgB9B,G,GAAvBM,E,KAAEE,E,KAELL,EAAOkB,EAAYf,GACvBe,EAAYf,GAAKe,EAAYb,GAC7Ba,EAAYb,GAAKL,EAEjBmB,EAAYlB,KAAKE,EAAEE,GAEhBR,GAAS8B,EAAgB7B,OAAS,IACjCqB,EAAYlB,KAAKiB,EAAYpB,OAAS,EAAGoB,EAAYpB,OAAS,GAC9DwB,KAAKG,SAAS,CAACN,iBAGnBG,KAAKG,SAAS,CAAEP,cAAYC,gB,UACtBW,EAAMR,KAAKL,MAAMI,O,QAnByBxB,I,2RAwBhD8B,EAAkBzB,EAAcoB,KAAKL,MAAMC,aAC3CA,EAAcI,KAAKL,MAAMC,YACzBC,EAAcG,KAAKL,MAAME,YAGpBtB,EAAQ,E,YAAGA,EAAQ8B,EAAgB7B,Q,sCACpB6B,EAAgB9B,G,GAA7BM,E,KAAEE,E,YAIDL,EAAOkB,EAAYf,GACvBe,EAAYf,GAAKe,EAAYb,GAC7Ba,EAAYb,GAAKL,GAGrBmB,EAAYlB,KAAKE,EAAEE,GAEhBR,GAAS8B,EAAgB7B,OAAS,IACjCqB,EAAYlB,KAAKiB,EAAYpB,OAAS,EAAGoB,EAAYpB,OAAS,GAC9DwB,KAAKG,SAAS,CAACN,iBAGnBG,KAAKG,SAAS,CAAEP,cAAaC,gB,UAEvBW,EAAMR,KAAKL,MAAMI,O,QAnByBxB,I,qKAuB/BkC,GAAO,IAAD,OAC3BA,EAAMC,UACNV,KAAKG,SAAS,CAACL,cAAgBW,EAAME,OAAOC,QAAQ,WAChD,EAAKX,aACLK,QAAQC,IAAIE,EAAME,OAAOC,MAAQ,MAAQ,EAAKjB,MAAMG,cAAgB,iBAAmB,EAAKH,MAAMC,YAAYpB,a,+CAK7FiC,GACrBT,KAAKG,SAAS,CAACJ,MAAQU,EAAME,OAAOC,U,+BAI/BrC,GAEL,IAAIsB,EAAcG,KAAKL,MAAME,YAE7B,OAAGA,EAAYgB,SAAStC,GACjBA,GAASsB,EAAYA,EAAYrB,OAAS,IAAMD,GAASsB,EAAYA,EAAYrB,OAAS,GA/GnF,UACK,UAFN,Y,+BA8HP,IAAD,OACEoB,EAAeI,KAAKL,MAApBC,YACHkB,EAAa,GAAKd,KAAKL,MAAMG,cACjC,OACI,yBAAKiB,UAAU,WAAWC,GAAG,aACzB,yBAAKD,UAAU,qBAAqBC,GAAG,YAClCpB,EAAYqB,KAAI,SAACC,EAAaC,GAAd,OACb,yBAAKJ,UAAU,aAAaK,IAAKD,EAAKE,MAAO,CAACC,OAAO,GAAD,OAAKJ,EAAc,GAAnB,MAA2BK,MAAM,GAAD,OAAKT,EAAL,MAAqBU,gBAAiB,EAAKC,SAASN,UAKhJ,yBAAKJ,UAAU,qBAAqBC,GAAG,cACnC,4BAAQU,QAAS,kBAAM,EAAKC,qBAA5B,sBACA,4BAAQD,QAAS,kBAAM,EAAKE,UAAU5C,KAAtC,eACA,4BAAQ0C,QAAS,kBAAM,EAAKE,UAAU1D,KAAtC,kBACA,4BAAQwD,QAAS,kBAAM,EAAKG,kBAA5B,kBACA,4BAAQH,QAAS,kBAAM,EAAKE,UAAU1C,KAAtC,eAEJ,yBAAK6B,UAAU,WACX,yBAAKA,UAAU,sBACX,2BAAOA,UAAU,eAAjB,qBACA,2BAAOA,UAAU,cAAce,KAAK,SAASC,IAAI,IAAIC,IAAI,OAAOC,SAAU,SAACxB,GAAD,OAAW,EAAKyB,yBAAyBzB,IAAQ0B,aAAcnC,KAAKL,MAAMG,iBAExJ,yBAAKiB,UAAU,sBACX,2BAAOA,UAAU,eAAjB,WACA,2BAAOA,UAAU,cAAce,KAAK,SAASC,IAAI,IAAIC,IAAI,MAAMC,SAAU,SAACxB,GAAD,OAAW,EAAK2B,yBAAyB3B,IAAQ0B,aAAcnC,KAAKL,MAAMI,a,4CAOjJgC,EAAKC,GACvB,OAAOK,KAAKC,MAAMD,KAAKE,UAAYP,EAAMD,EAAM,IAAMA,M,GA1JdS,IAAMC,WA8J/CjC,EAAQ,SAACkC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OChKvCI,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.435cb55d.chunk.js","sourcesContent":["export default function InsertionSort(array){\r\n    let arr = array.slice(0);\r\n    let animations = []\r\n    for (let index = 0; index < arr.length; index++) {\r\n        \r\n        if(index != 0){\r\n            let currentIndex = index\r\n            while(arr[currentIndex] < arr[currentIndex - 1]){\r\n                if(currentIndex == 0){ break; }\r\n                let temp = arr[currentIndex];\r\n                arr[currentIndex] = arr[currentIndex - 1];\r\n                arr[currentIndex - 1] = temp;\r\n                animations.push([currentIndex, currentIndex - 1]);\r\n                currentIndex--;\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}","export default function SelectionSort(arr){\r\n    let array = arr.slice(0);\r\n    let animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        let minIndex = i;\r\n        for (let j = i; j < array.length; j++) {\r\n            if(array[j] < array[minIndex]){\r\n                minIndex = j;\r\n                animations.push([i, minIndex, false]);\r\n            }\r\n        }\r\n        \r\n        let temp = array[i];\r\n        array[i] = array[minIndex];\r\n        array[minIndex] = temp;\r\n        animations.push([i, minIndex, true]);\r\n    }\r\n\r\n    return animations;\r\n}","export default function BubbleSort(array){\r\n    let arr = array.slice(0);\r\n    let animations = []\r\n    while(true){\r\n        let hasChanged = false;\r\n        for (let i = 0; i < arr.length - 1; i++) {\r\n            if(arr[i] > arr[i + 1]){\r\n                let temp = arr[i];\r\n                arr[i] = arr[i + 1];\r\n                arr[i + 1] = temp;\r\n                animations.push([i, i + 1]);\r\n                hasChanged = true;\r\n            }\r\n            \r\n        }\r\n        if(!hasChanged)\r\n            break;\r\n    }\r\n    return animations;\r\n}","let animations = [];\r\nexport default function GetQuickSortAnimation(array){\r\n        animations = [];\r\n        let arr = array.slice(0);\r\n        QuickSort(arr, 0, arr.length - 1);\r\n        return animations;\r\n}\r\n\r\nfunction QuickSort(arr, low, high){\r\n    \r\n    if(low < high){\r\n        let pi = Partition(arr, low, high);\r\n        QuickSort(arr, low, pi - 1);\r\n        QuickSort(arr, pi + 1, high);\r\n    }\r\n}\r\n\r\n\r\nfunction Partition(arr, low, high){\r\n    let i = low - 1;//smaller element\r\n    for (let index = low; index <= high - 1; index++) {\r\n        if( arr[index] <= arr[high]){\r\n            i++;\r\n            //swap\r\n            let temp = arr[i];\r\n            arr[i] = arr[index];\r\n            arr[index] = temp;\r\n            animations.push([i, index]);\r\n        }\r\n    }\r\n    let temp = arr[i + 1];\r\n    arr[i + 1] = arr[high];\r\n    arr[high] = temp;\r\n    animations.push([i + 1, high]);\r\n    return i + 1;\r\n}","import React from 'react'\r\nimport './SortingVisualizer.css'\r\nimport InsertionSort from '../SortingAlgorithms/InsertionSort'\r\nimport SelectionSort from '../SortingAlgorithms/SelectionSort'\r\nimport BubbleSort from '../SortingAlgorithms/BubbleSort'\r\nimport GetQuickSortAnimation from '../SortingAlgorithms/QuickSort'\r\n\r\nconst NORMAL_COLOR = '#900c3f';\r\nconst CHANGED_COLOR = '#51ff00';\r\nconst AFTER_CHANGE_COLOR = '#ff5733';\r\n\r\nvar abort = false;\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            arrayToSort: [],\r\n            prevChanged: [],\r\n            numberOfItems: 100,\r\n            delay: 10\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const arrayToSort = [];\r\n        const prevChanged = [];\r\n        for (let i = 0; i < this.state.numberOfItems; i++) {\r\n            arrayToSort.push(this.RandomIntBetweenRange(5, 1000));\r\n        }\r\n        this.setState({ arrayToSort, prevChanged });\r\n        abort = false;\r\n    }\r\n    \r\n    generateNewArray(){\r\n        abort = true;\r\n        this.resetArray();\r\n    }\r\n\r\n    async SortArray(algo){\r\n        let sortedArrayAnim = algo(this.state.arrayToSort);\r\n        let arrayToSort = this.state.arrayToSort;\r\n        let prevChanged = this.state.prevChanged;\r\n\r\n        for (let index = 0; index < sortedArrayAnim.length; index++) {\r\n            if(this.abort){\r\n                console.log(abort);\r\n                return null;\r\n            }\r\n            const [i,j] = sortedArrayAnim[index];\r\n\r\n            let temp = arrayToSort[i];\r\n            arrayToSort[i] = arrayToSort[j];\r\n            arrayToSort[j] = temp;\r\n        \r\n            prevChanged.push(i,j);\r\n\r\n            if(index == sortedArrayAnim.length - 1){\r\n                prevChanged.push(arrayToSort.length + 1, arrayToSort.length + 1);\r\n                this.setState({prevChanged});\r\n            }\r\n\r\n            this.setState({ arrayToSort,prevChanged });\r\n            await sleep(this.state.delay);\r\n        }\r\n    }\r\n\r\n    async selectionSort(){\r\n        let sortedArrayAnim = SelectionSort(this.state.arrayToSort);\r\n        let arrayToSort = this.state.arrayToSort;\r\n        let prevChanged = this.state.prevChanged;\r\n\r\n        //loop through all the animations\r\n        for (let index = 0; index < sortedArrayAnim.length; index++) {\r\n            const [i,j, swap] = sortedArrayAnim[index];\r\n\r\n            //change array\r\n            if(swap){\r\n                let temp = arrayToSort[i];\r\n                arrayToSort[i] = arrayToSort[j];\r\n                arrayToSort[j] = temp;\r\n            }\r\n        \r\n            prevChanged.push(i,j);\r\n\r\n            if(index == sortedArrayAnim.length - 1){\r\n                prevChanged.push(arrayToSort.length + 1, arrayToSort.length + 1);\r\n                this.setState({prevChanged});\r\n            }\r\n\r\n            this.setState({ arrayToSort, prevChanged });\r\n                \r\n            await sleep(this.state.delay);\r\n        }\r\n    }\r\n\r\n    handleItemsInputOnChange(event){\r\n        event.persist();\r\n        this.setState({numberOfItems : event.target.value}, () => {\r\n            this.resetArray();\r\n            console.log(event.target.value + \" - \" + this.state.numberOfItems + \" - arraySize: \" + this.state.arrayToSort.length);\r\n        });\r\n        \r\n    }\r\n\r\n    handleDelayInputOnChange(event){\r\n        this.setState({delay : event.target.value});\r\n        \r\n    }\r\n\r\n    getColor(index){\r\n\r\n        let prevChanged = this.state.prevChanged;\r\n\r\n        if(prevChanged.includes(index)){\r\n            if(index == prevChanged[prevChanged.length - 1] || index == prevChanged[prevChanged.length - 2]){\r\n                return CHANGED_COLOR;\r\n            }\r\n            else{\r\n                return AFTER_CHANGE_COLOR;\r\n            }\r\n        }\r\n        else{\r\n            return NORMAL_COLOR;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n        const {arrayToSort} = this.state;\r\n        let widthValue = 40 / this.state.numberOfItems;\r\n        return (\r\n            <div className=\"main-div\" id=\"centerdiv\">\r\n                <div className=\"centerdivKeepWidth\" id=\"itemsDiv\">\r\n                    {arrayToSort.map((heightValue, idx) => (\r\n                        <div className=\"array-item\" key={idx} style={{height: `${heightValue / 25}vw`, width: `${widthValue}vw`, backgroundColor: this.getColor(idx)}}>\r\n                            \r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"centerdivKeepWidth\" id=\"buttonsDiv\">\r\n                    <button onClick={() => this.generateNewArray()}>Generate new array</button>\r\n                    <button onClick={() => this.SortArray(BubbleSort)}>Bubble Sort</button>\r\n                    <button onClick={() => this.SortArray(InsertionSort)}>Insertion Sort</button>\r\n                    <button onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                    <button onClick={() => this.SortArray(GetQuickSortAnimation)}>Quick Sort</button>\r\n                </div>\r\n                <div className=\"flexDiv\">\r\n                    <div className=\"centerdivKeepWidth\">\r\n                        <label className=\"numberLabel\">Number of Items: </label>\r\n                        <input className=\"numberInput\" type=\"number\" min=\"5\" max=\"1500\" onChange={(event) => this.handleItemsInputOnChange(event)} defaultValue={this.state.numberOfItems}/>\r\n                    </div>\r\n                    <div className=\"centerdivKeepWidth\">\r\n                        <label className=\"numberLabel\">Delay: </label>\r\n                        <input className=\"numberInput\" type=\"number\" min=\"1\" max=\"100\" onChange={(event) => this.handleDelayInputOnChange(event)} defaultValue={this.state.delay}/>\r\n                    </div>\r\n                </div>\r\n            </ div>\r\n        );\r\n    }\r\n\r\n    RandomIntBetweenRange(min, max){\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n}\r\n\r\nconst sleep = (milliseconds) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n}","import React from 'react';\n\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx'\n\nfunction App() {\n  return (\n    <div>\n      <SortingVisualizer />\n    </ div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}